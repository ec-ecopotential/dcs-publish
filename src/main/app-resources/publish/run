#!/opt/anaconda/bin/python

import sys
import os
import lxml.etree as et
import shutil
import tarfile
import atexit
import glob
import configparser

sys.path.append('/opt/anaconda/bin/')
import cioppy
ciop = cioppy.Cioppy()

# define the exit codes
SUCCESS = 0
ERR_RESOLUTION = 10
ERR_STAGEIN = 20
ERR_PUBLISH = 30


api_key  = ciop.getparam('api_key')

# add a trap to exit gracefully
def clean_exit(exit_code):
    log_level = 'INFO'
    if exit_code != SUCCESS:
        log_level = 'ERROR'  
   
    msg = {SUCCESS: 'Processing successfully concluded',
           ERR_RESOLUTION: 'Could not resolve the reference enclosure',
           ERR_STAGEIN: 'Could not stage-in the reference',
           ERR_PUBLISH: 'Failed to publish the reference',    
    }
 
    ciop.log(log_level, msg[exit_code])  

def sftp_upload(product_path, hostname, user, passwd, target_dir):

    ciop.log('INFO', 'Connecting to %s' % hostname)
    try:
        with pysftp.Connection(hostname, username=user, password=passwd, cnopts=cnopts) as sftp:
            sftp.makedirs(target_dir)
        with sftp.cd(target_dir):
            sftp.put(product_path, preserve_mtime=True)
            
    except IOError as e:
        ciop.log('ERROR','I/O error({0}): {1} {2}'.format(e.errno, e.filename, e.strerror))
        return False  
    except:
        ciop.log('ERROR','Unexpected error:', sys.exc_info()[0])
        return False  
    
    return True


def main():

    os.chdir(ciop.tmp_dir)

    config_url = ciop.getparam('config_url')
    
    r = requests.get(config_url, headers={"X-JFrog-Art-Api":api_key, 'User-Agent': 'curl/t2Client'})
    
    ini_content = ''
    
    if r.status_code == 200:
        ini_content = r.content
    
    if not ini_content:
        raise ValueError
    
    # read the configuration values
    buf = StringIO.StringIO(ini_content)
    config = configparser.ConfigParser()
    config.readfp(buf)

    hostname = config.get('sftp', 'hostname')
    user = config.get('sftp', 'user')
    passwd = config.get('sftp', 'passwd')
    
    # Loops over all the inputs
    for input in sys.stdin:
      
        entry = string.replace(input.rstrip(), 'rdf', 'atom')
        
        # report activity in log
        ciop.log('INFO', 'The entry reference is: %s' %  entry)

        search = ciop.search(end_point = entry, 
                             params = [], 
                             output_fields='enclosure,identifier', 
                             model='GeoTime')
        
        assert(search), sys.exit(ERR_RESOLUTION)

        ciop.log('INFO', 'Retrieve %s from %s' % (search[0]['identifier'], search[0]['enclosure']))
      
        retrieved = ciop.copy(search[0]['enclosure'], 
                              ciop.tmp_dir,
                              extract=False)
        
        assert(retrieved), sys.exit(ERR_STAGEIN)

        if sftp_upload(retrieved, hostname, user, passwd, remote_path):
            
            ciop.log('INFO', '%s published' % search[0]['identifier'])
            
        else:
            sys.exit(ERR_PUBLISH)
     
try:
    main()
except SystemExit as e:
    if e.args[0]:
        clean_exit(e.args[0])
        raise
else:
    atexit.register(clean_exit, 0)

